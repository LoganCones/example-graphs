library(shiny)
library(shinyalert)

ui <- fluidPage(
  shinyalert::useShinyalert(),
  
  actionButton("submitBtn", "Submit"),
  
  tableOutput("dataTable")
)

server <- function(input, output, session) {
  
  data <- reactiveVal(NULL)
  
  observeEvent(input$submitBtn, {
    shinyalert(
      title = "Confirmation",
      text = "Are you sure you want to submit?",
      type = "info",
      showCancelButton = TRUE,
      closeOnClickOutside = FALSE,
      callbackR = TRUE,
      confirmButtonText = "Submit"
    )
  })
  
  observeEvent(input$shinyalert, {
    if (input$shinyalert == TRUE) {
      # Show loading message
      shinyalert(
        title = "Processing",
        text = shiny::div(
          shiny::tags$p("Please wait while the action is being processed..."),
          shiny::tags$div(class = "shinyalert-progress-container",
                          shiny::tags$div(class = "shinyalert-progress-bar")
          )
        ),
        type = "info",
        closeOnClickOutside = FALSE,
        showConfirmButton = FALSE
      )
      
      # Perform your time-consuming operation here
      
      # Simulate a delay of 3 seconds
      Sys.sleep(3)
      
      # Hide the loading message and show the final message
      shinyalert(
        title = "Submitted",
        type = "success",
        showConfirmButton = FALSE,
        timer = 2000
      )
      
      # Update the table with new data
      newData <- # Your code to generate new data
      data(newData)
    }
  })
  
  output$dataTable <- renderTable({
    data()
  })
}

shinyApp(ui, server)
