library(shiny)
library(DT)
library(shinyjs)

ui <- fluidPage(
  shinyjs::useShinyjs(),
  
  actionButton("action", "Submit"),
  
  DT::dataTableOutput("datatable")
)

server <- function(input, output, session) {
  observeEvent(input$action, {
    shinyjs::disable("action")
    
    showNotification(
      ui = div("Processing...", id = "processing_notification"),
      duration = NULL,
      closeButton = FALSE
    )
    
    # Simulate loading time
    Sys.sleep(3)
    
    # Update the datatableOutput with new data
    newData <- data.frame(
      Name = c("John", "Jane", "Sam"),
      Age = c(25, 32, 40),
      stringsAsFactors = FALSE
    )
    
    output$datatable <- DT::renderDataTable({
      DT::datatable(newData)
    })
    
    shinyjs::show("processing_notification")
    shinyjs::hide("processing_notification", delay = 2)
    
    shinyjs::enable("action")
    showNotification(
      ui = div("Success", id = "success_notification"),
      duration = 2,
      closeButton = FALSE,
      type = "success"
    )
  })
  
  output$datatable <- DT::renderDataTable({
    data.frame()
  })
}

shinyApp(ui, server)
