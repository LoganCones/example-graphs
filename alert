library(shiny)
library(shinyalert)
library(DT)
library(shinyjs)

ui <- fluidPage(
  shinyalert::useShinyalert(),
  shinyjs::useShinyjs(),
  
  actionButton("action", "Submit"),
  
  DT::dataTableOutput("datatable")
)

server <- function(input, output, session) {
  
  observeEvent(input$action, {
    shinyalert(
      title = 'Test',
      class = 'confirm',
      text = 'Please confirm your submission',
      type = 'warning',
      showCancelButton = TRUE,
      confirmButtonText = 'Confirmed',
      cancelButtonText = 'Cancel',
      callbackR = function(value) {
        if (value) {
          shinyalert("Processing", type = 'info', showConfirmButton = FALSE)
          
          # Simulate loading time
          Sys.sleep(3)
          
          # Update the datatableOutput with new data
          newData <- data.frame(
            Name = c("John", "Jane", "Sam"),
            Age = c(25, 32, 40),
            stringsAsFactors = FALSE
          )
          
          output$datatable <- DT::renderDataTable({
            DT::datatable(newData)
          })
          
          shinyjs::runjs('
            setTimeout(function() {
              var successAlert = $(\'.shinyalert-container:contains("Processing")\');
              successAlert.find(\'.shinyalert-title\').text("Success");
              successAlert.find(\'.shinyalert-text\').text("Table loaded successfully");
              successAlert.find(\'.shinyalert-icon\').removeClass("sa-info");
              successAlert.find(\'.shinyalert-icon\').addClass("sa-success");
              setTimeout(function() {
                successAlert.remove();
              }, 2000);
            }, 0);
          ')
        } else {
          shinyalert('Submission canceled', type = 'info')
        }
      }
    )
  })
  
  output$datatable <- DT::renderDataTable({
    data.frame()
  })
}

shinyApp(ui, server)
